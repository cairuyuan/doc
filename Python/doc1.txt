1
python的实例属性必须在__init__(self) 方法中定义，直接跟在类名后边定义的属性都默认是类属性(类似于c++的static变量)。

self.xxxx这种格式的第一次赋值含义是什么呢？-->含义是：定义，也就是说定义了一个名为xxxx的实例属性。

reload ： 对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。

split()的用法是这样的，你只要在括号里面打上你需要以什么分割就可以了，比如你要以#分割，那就split("#")。例如a = "a#a#a", b = a.split("#") >>> print b 就输出[a,a,a]



2
如果在成员函数中，使用self.类属性作为左值进行赋值操作，这相当于重新定义一个同名的实例属性，区别于类属性。原来的类属性不变。

一个类似但是不同的例外：类属性为一个字典，这样的语句self.model_dict["a"] = "asd"，给字典添加元素，不会引起重新定义。

可采用类来访问类属性，如果实例没有同名的属性，也可以用实例来访问。



3 
__init__应当返回none，因为他是第一个调用的，没有成员调用更早
实例也有一个__dict__特殊属性
python里class也是个真实存在于内存中的对象或变量，而不是静态语言中只存在于编译期间的类型

classmethod：类方法
staticmethod：静态方法

静态方法和类方法都是可以通过类对象和类对象实例访问。但是：

类方法的第一个参数是类变量(区别于类的实例)，实例方法的第一个参数是类的实例。 

静态方法则没有，它基本上跟一个全局函数相同，一般来说用的很少



4
P是基类，c是派生类的实例，foo是P的一个普通方法，在C中进行了重写，使用P.foo(c)调用被重写的方法，c作为self参数
如果子类中覆盖了__init__()，子类被实例化时，基类的__init__()就不会被自动调用，如果需要调用，可以P.__init__(self)或super(C, self).__init__()

issubclass(sub, sup)布尔函数判断一个类是另一个类的子类或子孙类。

isinstance(obj, cls)布尔函数在判定一个对象是否是另一个给定类的实例

hasattr(obj,'attr')检查一个对象是否有一个特定的属性
getattr()和setattr(obj,attr,value)函数相应地取得和赋值给对象的属性

dir(obj)列出一个模块所有属性的信息

super(type,obj),并且要求
如果 obj 是一个实例，    isinstance(obj,type)必须返回True
如果 obj 是一个类或类型，issubclass(obj,type)必须返回True
通常的用法第一类居多，是一个工厂函数，创造了一个super object，

vars()内建函数与dir()相似


5
模块级私有化只需要在属性名前使
用一个单下划线
类的私有化属性前面加两个下划线



6
对于类和实例，都能以该对象为参数，通过内建函数dir()来获得他们的数据和方法属性
dir([].append)



7
os.system('cat /etc/motd')，当执行命令时，python 挂起，完成之后会继续



8
导入文件，查找的路径修改
shell中的pythonpath，一组用冒号分割的目录集合。解释器启动后，这个路径也可以通过sys.path访问

加载模块会导致这个模块被"执行"，也就是被导入模块的顶层代码将直接被执行

globals() 和 locals() 内建函数分别返回调用者全局和局部名称空间的字典



9
多线程的资源同步，可使用thread.RLock()来创建资源锁，然后使用acquire()来锁住资源，release()来释放资源。等待事件用thread.Event()，用wait()来等待事件，set()来激发事件，clear()用于清除已激发事件。另外可以用isAlive()来判断线程是否存活着



10
join：如在一个线程B中调用A.join()，则A结束后，线程B才会接着A.join()的后面运行。
setDaemon：主线程A启动了子线程B，调用B.setDaemaon(True)，则A线程结束时，会把线程B也杀死。
import multiprocessing  
import sys  
  
def worker_with(lock, f):  
    with lock:  
        fs = open(f,"a+")  
        fs.write('Lock acquired via with\n')  
        fs.close()  
          
def worker_no_with(lock, f):  
    lock.acquire()  
    try:  
        fs = open(f,"a+")  
        fs.write('Lock acquired directly\n')  
        fs.close()  
    finally:  
        lock.release()  
  
if __name__ == "__main__":  
  
    f = "file.txt"  
    
    lock = multiprocessing.Lock()  
    w = multiprocessing.Process(target=worker_with, args=(lock, f))  
    nw = multiprocessing.Process(target=worker_no_with, args=(lock, f))  
  
    w.start()  
    nw.start()  
  
    w.join()  
    nw.join()  



11
一个线程调用os._exit(0) 后，整个进程组都退出



12
multiprocessing包是Python中的多进程管理包。与threading.Thread类似，它可以利用multiprocessing.Process对象来创建一个进程。该进程可以运行在Python程序内部编写的函数。该Process对象与Thread对象的用法相同，也有start(), run(), join()的方法。此外multiprocessing包中也有Lock/Event/Semaphore/Condition类 (这些对象可以像多线程那样，通过参数传递给各个进程)，用以同步进程，其用法与threading包中的同名类一致。所以，multiprocessing的很大一部份与threading使用同一套API，只不过换到了多进程的情境。

但在使用这些共享API的时候，我们要注意以下几点:

在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。有必要对每个Process对象调用join()方法 (实际上等同于wait)。

multiprocessing提供了threading包中没有的IPC(比如Pipe和Queue)，效率上更高。

应优先考虑Pipe和Queue，避免使用Lock/Event/Semaphore/Condition等同步方式 (因为它们占据的不是用户进程的资源)。

在多线程中，我们可以比较容易地共享资源，比如使用全局变量或者传递参数。

多进程情况下，由于每个进程有自己独立的内存空间，以上方法并不合适。此时我们可以通过共享内存和Manager的方法来共享资源。但这样做提高了程序的复杂度，并因为同步的需要而降低了程序的效率。



13
异常类
BaseExceptiona 		所有异常的基类
SystemExitb python 	解释器请求退出
KeyboardInterruptc 	用户中断执行(通常是输入^C)
Exceptiond 		常规错误的基类
StopIteratione 		迭代器没有更多的值
GeneratorExita 		生成器(generator)发生异常来通知退出
SystemExith Python 	解释器请求退出
StandardErrorg 		所有的内建标准异常的基类
ArithmeticErrord 	所有数值计算错误的基类
FloatingPointErrord 	浮点计算错误
OverflowError 		数值运算超出最大限制
ZeroDivisionError 	除(或取模)零 (所有数据类型)
AssertionErrord 	断言语句失败
AttributeError 		对象没有这个属性
EOFError 		没有内建输入,到达EOF 标记
EnvironmentErrord 	操作系统错误的基类
IOError 		输入/输出操作失败
OSErrord 		操作系统错误
WindowsErrorh Windows 	系统调用失败
ImportError 		导入模块/对象失败
KeyboardInterruptf 	用户中断执行(通常是输入^C)
LookupErrord 		无效数据查询的基类
IndexError 		序列中没有没有此索引(index)
KeyError 		映射中没有这个键
MemoryError 		内存溢出错误(对于Python 解释器不是致命的)
NameError 		未声明/初始化对象 (没有属性)
UnboundLocalErrorh 	访问未初始化的本地变量
ReferenceErrore 	弱引用(Weak reference)试图访问已经垃圾回收了的对象
RuntimeError 		一般的运行时错误
NotImplementedErrord 	尚未实现的方法
SyntaxError Python	语法错误
IndentationErrorg 	缩进错误
TabErrorg Tab 		和空格混用
SystemError 		一般的解释器系统错误
TypeError 		对类型无效的操作
ValueError 		传入无效的参数
UnicodeErrorh Unicode 	相关的错误



14
完整语法
try:  
    try_suite  
except Exception1,Exception2,...,Argument:  
    exception_suite  
else:  
    no_exceptions_detected_suite  
finally:  
    always_execute_suite  



15
try:  
    try_suite  
except:  
    exception block  
上面except子句不跟任何异常和异常参数，所以无论try捕获了任何异常，都将交给except子句的exception block来处理

在except后面和：之前加上异常类，限制为特定的异常
可以在except语句块后面加一个else，当没有错误发生时，会自动执行else语句：
raise语句如果不带参数，就会把当前错误原样抛出

16
每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。__init__.py可以是空文件，也可以有Python代码。

第三方库都会在Python官方的pypi.python.org网站注册，



17
动态绑定方法
>>> def set_age(self, age): # 定义一个函数作为实例方法
...     self.age = age
...
>>> from types import MethodType
>>> s.set_age = MethodType(set_age, s, Student) # 给实例绑定一个方法
>>> s.set_age(25) # 调用实例方法
>>> s.age # 测试结果25

给一个实例绑定的方法，对另一个实例是不起作用的：
直接给class动态绑定，之后所有的实例都能使用
>>> def set_score(self, score):
...     self.score = score
...
>>> Student.set_score = MethodType(set_score, None, Student)



18
Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class能添加的属性
class Student(object):
     __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称

试图绑定其他属性就会出错
__slots__定义的属性仅对当前类起作用，对继承的子类是不起作用的



19
class student(object):
    
    def __init__(self):
        self._age = 0
        
    @property                    #
    def age(self):
        return self._age
    
    @age.setter
    def age(self,value):
        if not isinstance(value,int):
            raise ValueError('age should be int')
        if value < 0 or value > 120:
            raise ValueError('age should between 0 ~ 100')
        self._age = value
        
if __name__ == '__main__':
    stu = student()
    print stu.age
    stu.age = 12
    print stu.age

使用修饰器，定义时属性名要加一个_外部使用时不用加，getter方法用@property，对应的函数名字和属性名相同，不加_，setter方法，是用@属性名.setter对应的函数名称任然是不加_的属性名字



20
class的定义是运行时动态创建的，而创建class的方法就是使用type()函数
type()函数既可以返回一个对象的类型，又可以创建出新的类型



21
把一个列表生成式的[]改成()，就创建了一个generator
generator保存的是算法，每次调用next()，就计算出下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。
如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。



22
map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。

reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

sorted()函数也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序。注意合适的返回值

内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构。每次调用都会返回一个新的函数，即使传入相同的参数
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum
>>> f = lazy_sum(1, 3, 5, 7, 9)
>>> f
<function sum at 0x10452f668>



23
def log(func):
    def wrapper(*args, **kw):
        print 'call %s():' % func.__name__
        return func(*args, **kw)
    return wrapper

log对传入的func函数进行修饰
@log#相当于now= log（now）
def now():
    print '2013-12-25'
之后调用now()，就会从log处执行，



24
以一个下划线开头的实例变量名，意思是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”

ThreadLocal相当于一个全局字典，每个thread都可以从中找出自己的变量，使用时先建立一个全局的变量，然后通过点号存取

一个函数参数的默认值，仅仅在该函数定义的时候，被赋值一次。不要将默认参数设置为可变对象。当函数以后在执行时，由于默认参数已经定义（可变对象），就会使用之前的那个默认值，导致，这个默认值（可变）不会为每一次调用重新创建，而是成为一个全局变量


26
匿名函数lambda
g = lambda x : x**2
print g(4)



27
>>> class A(object):
...     x = 1
>>> class B(A):
...     pass
>>> class C(A):
...     pass
>>> print A.x, B.x, C.x
1 1 1
>>> B.x = 2
>>> print A.x, B.x, C.x
1 2 1
>>> A.x = 3
>>> print A.x, B.x, C.x
3 2 3
我了个去。只是改变了A.x，为啥C.x也变了？

在Python里，类变量通常在内部被当做字典来处理并遵循通常所说的方法解析顺序（Method Resolution Order (MRO)）。因此在上面的代码中，因为属性x在类C中找不到，因此它会往上去它的基类中查找（在上面的例子中只有A这个类，当然Python是支持多重继承（multiple inheritance）的）。换句话说，C没有它自己独立于A的属性x。因此对C.x的引用实际上是对A.x的引用。（B.x不是对A.x的引用是因为在第二步里B.x=2将B.x引用到了2这个对象上，倘若没有如此，B.x仍然是引用到A.x上的。——译者注）



28
元类也是一个类，是一个type类。
元类一般用于创建类。在执行类定义时，解释器必须要知道这个类的正确的元类，如果此属性没有定义，它会向上查找父类中的__metaclass__属性。如果还没发现，就查找全局变量。
对于传统类来说，它们的元类是types.ClassType。元类也有构造器，传递三个参数：类名，从基类继承数据的元组，和类属性字典

type可以像这样工作：
type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)
__class__属性，是这个对象的类

class Foo(Bar): 
    pass
Python做了如下的操作：

Foo中有__metaclass__这个属性吗？如果是，Python会在内存中通过__metaclass__创建一个名字为Foo的类对象（我说的是类对象，请紧跟我的思路）。如果Python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。如果还是找不到__metaclass__,Python就会用内置的type来创建这个类对象。



29
__new__ 是在__init__之前被调用的特殊方法，__new__是用来创建对象并返回的方法，而__init__只是用来将传入的参数初始化给对象 
'type'实际上是一个类，就像'str'和'int'一样  所以，你可以从type继承 

super(classA,self)，通常用在classA的内部实例方法中，生成classA的父类的实例，

 如果在类中同时定义了__init__和__new__，在创建对象的时候会有优先使用__new__

new方法会返回所构造的对象，init则不会，在使用new返回对象的时候会隐式调用init函数。new函数必须以cls作为第一个参数，而init则以self作为其第一个参数

利用new创建一个类的对象的最常用的方法为：super(currentclass, cls).__new__(cls[, ...]) 


30
如果想调用基类的 __init__方法必须显式的调用，只继承基类在初始化子类时并不会自动调用基类的 __init__ 方法
Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named __init__()
当实例创建完成就调用 __init__ 方法，初始化类的内部状态值。

__new__ 方法其实是一个静态方法，不用每次定义类的时候都声明这个方法，因为在版本 2.4 之后 object 是所有对象的基类，而 __new__ 是定义在 object 对象内部的静态方法。

 Python 中把初始化和创建对象这两个概念分开了

在Python里自定义class时，方法的第一个参数必须是该class的instance自身的引用(一般用self命名)

Python基本上是函数式语言（广义的），面向对象是其使用hash表后的附属物而已。这一点与原本作为面向对象编程语言而设计的C++, Java, Ruby等相异。




31
metaclass的原理其实是这样的：当定义好类之后，创建类的时候其实是调用了type的__new__方法为这个类分配内存空间，创建
好了之后再调用type的__init__方法初始化（做一些赋值等）。所以metaclass的所有magic其实就在于这个__new__方法里面了。
方法：__new__(cls, name, bases, attrs)
cls: 将要创建的类，类似与self，但是self指向的是instance，而这里cls指向的是class
name: 类的名字，也就是我们通常用类名.__name__获取的。
bases: 基类
attrs: 属性的dict。dict的内容可以是变量(类属性），也可以是函数（类方法）。

所以在创建类的过程，我们可以在这个函数里面修改name，bases，attrs的值来自由的达到我们的功能。这里常用的配合方法是
getattr和setattr（just an advice)
