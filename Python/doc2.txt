1
git checkout -- [文件名]	取消刚才修改过，但是尚未add的文件
如果已经add过就要两步
git reset HEAD -- [文件名]
git checkout -- [文件名]
git clean 参数
    -n 显示 将要 删除的 文件 和  目录
     -f 删除 文件，-df 删除 文件 和 目录
git clean -n
git clean -df
git clean -f



2
python’s getattr function is used to fetch an attribute from an object, using a string object instead of an identifier to identify the attribute



3
logging是线程安全的
默认情况下，logging将日志打印到屏幕，日志级别为WARNING；
日志级别大小关系为：CRITICAL > ERROR > WARNING > INFO > DEBUG > NOTSET，当然也可以自己定义日志级别。

如果不指定basicconfig的filename参数就会输出到屏幕
logging.basicConfig(
		level		=	logging.DEBUG,
                format		=	'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                datefmt		=	'%a, %d %b %Y %H:%M:%S',
                filename	=	'myapp.log',
                filemode	=	'w')

level: 设置日志级别，默认为logging.WARNING
format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:
 	%(levelno)s: 打印日志级别的数值
 	%(levelname)s: 打印日志级别名称
	%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]
 	%(filename)s: 打印当前执行程序名
 	%(funcName)s: 打印日志的当前函数
 	%(lineno)d: 打印日志的当前行号
 	%(asctime)s: 打印日志的时间
 	%(thread)d: 打印线程ID
 	%(threadName)s: 打印线程名称
 	%(process)d: 打印进程ID
	%(message)s: 打印日志信息
datefmt: 指定时间格式，同time.strftime()

stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略
filename: 指定日志文件名
filemode: 和file函数意义相同，指定日志文件的打开模式，'w'或'a'


4
f=open('/tmp/hello','w')
	rU 或 Ua 以读方式打开, 同时提供通用换行符支持 (PEP 278)
	w     以写方式打开，
	a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)
	r+     以读写模式打开
	w+     以读写模式打开 (参见 w )
	a+     以读写模式打开 (参见 a )
	rb     以二进制读模式打开
	wb     以二进制写模式打开 (参见 w )
	ab     以二进制追加模式打开 (参见 a )
	rb+    以二进制读写模式打开 (参见 r+ )
	wb+    以二进制读写模式打开 (参见 w+ )
	ab+    以二进制读写模式打开 (参见 a+ )

f.read([size]) size未指定则返回整个文件,如果文件大小>2倍内存则有问题.f.read()读到文件尾时返回""(空字串)
file.readline() 返回一行
file.readline([size]) 返回包含size行的列表,size 未指定则返回全部行
for line in f: print line #通过迭代器访问
f.write("hello\n")
f.tell() 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).
f.seek(偏移量,[起始位置])用来移动文件指针
	偏移量:单位:比特,可正可负
	起始位置:0-文件头,默认值;1-当前位置;2-文件尾
f.close() 关闭文件



5
self和cls只是python中约定的写法，本质上只是一个函数参数而已，没有特别含义
任何对象调用方法都会把把自己作为该方法中的第一个参数，传递到函数中。
decorator是一个函数， 接收一个函数作为参数， 返回值是一个函数

一个修饰符就是一个函数，它将被修饰的函数做为参数，并返回修饰后的同名函数或其它可调用的东西。

调用一个被修饰的函数，
	调用修饰函数
	如果修饰函数返回了一个可调用的函数，则调用此函数，参数为最开始调用时的参数

当函数的参数不确定时，可以使用*args和**kwargs。
*args没有key值 ，可以当作可容纳多个变量组成的list 
**kwargs有key值，可以当作容纳多个key和value的dictionary



6
copy模块
profile分析
eclipse调试，双击行号左侧添加断点，用debug运行
F5	step into
F6	step over
F7	step return
F8	运行到下一断

多数据成员进行频繁的查找或者访问的时候，使用 dict 而不是 list 



7
安装django
首先确保安装了setuptool模块
	下载源文件，进入其目录运行 python setup.py install
下载django源文件，可以git clone git://github.com/django/django.git或下载网站上的版本
进入目录运行python setup.py install
测试：进入python>>>import django能正常导入就基本成功，再运行print(django.get_version())显示版本



8
在命令行下面，
使用python */django-admin.py [mysite]	在当前目录下面创建一个名为[mysite]的工程
	修改里面的views.py和urls.py文件实现一个简单的web程序	通过127.0.0.1输出
在django中不同的模块就成为不同的app
在刚创建的工程下面（和manage.py同文件夹）创建一个app
	python manage.py startapp [world]	创建一个[world] app
使用python manage.py sync来创建数据库，可能会与到问题：supply engine value.
	服务器配置文件格式要正确，不要有多余的字符如逗号，不同django版本的格式。。。。
	安装mysql-pyhton的connector，3者位数版本要统一
在installed_apps中添加app名，用'[world]'这样在model.py中定义的数据表就能被创建了

	

9
子模块（web程序，页面）的路径问题
射项目名称为	mysite
则mysite文件加下面会有 mysite文件夹（主程序），manage.py
新添加的模块和第二个mysite同层次，和manage.py同目录，例如名为world，这就是一个页面的模块
需要在主程序文件夹的setting.py中的installedapp中添加app名即 world
在主程序的url.py中可以使用两种方式分发url请求
	1 url(r'^world/$', include('world.urls')),
	2 from world import views
	  url(r'^world/$', views.index)
这样就会把url的请求分发到world程序的urls.py中，在这个文件中，url的路径已经变成
	r'^$' 	-->	http://127.0.0.1:8000/world/
也就是说在上层的路径中增加了子程序名world



10
syncdb 仅仅创建数据库中不存在的表，而不会同步模型的修改或者
删除到数据库。如果你添加或者修改了模型的一个字段，或者删除一个模型，你必须手动改变你的数据库

站点管理：
4个installed_app，3个中间件类，syncdb，urls映射，更改中文，models的文件夹添加admin.py，数据类中添加admin类并配置

null表示什么都没有，blank表示空白，null=True表示允许什么都没有，blank=True表示允许空白，空白不代表什么都没有，空字符串就是空白的值；
对于数值型，布尔型的字段，null=True，blank=False表示允许什么都没有，但不允许为空字符串。

使django的网站可以在外部访问
python mange.py runserver 0.0.0.0:8000端口号可以改但不能冲突

GET 和POST 是浏览器使用的两个方法，用于发送数据到服务器端



11
写urls的条目时
每一条匹配后注意要加上/例如，不加就是地址错误
	url(r'^search/$', 'mysite.views.search'),

每当Django遇到include() 时，它将截断匹配的URL，并把剩余的字符串发往包含的URLconf作进一步处理

被跨域脚本 (XSS) 攻击

syncdb仅仅创建数据库里还没有的表，它 并不 对你数据模型的修改进行同步,也不处理数据模型的删除。 如果你新增或修改数据模型里的字段,或是删除了一个数据模型，你需要手动在数据库里进行相应的修改



12
用session 框架来存取每个访问者任意数据， 这些数据在服务器端存储，并对cookie的收发进行了抽象。 Cookies只存储数据的哈希会话ID，而不是数据本身，从而避免了大部分的常见cookie问题

如果不需要session功能，你可以删除 MIDDLEWARE_CLASSES 设置中的 SessionMiddleware 和 INSTALLED_APPS 设置中的 'django.contrib.sessions'



13
Django 模板是利用 {{ variables }} 和 {% tags %} 中嵌入的文本创建的。变量会使用它们表示的值进行计算和替换。标记用来实现基本的控制逻辑。模板可以用来生成任何基于文本的格式，包括 HTML、XML、CSV 和纯文本。
