
E. Table
　　　　关系表类型，这是一个很强大的类型。我们可以把这个类型看作是一个数组。只是C语言的数组，只能用正整数来作索引；在Lua中，你可以用任意类型来作数组的索引，除了nil。同样，在C语言中，数组的内容只允许一种类型；在Lua中，你也可以用任意类型的值来作数组的内容，除了nil。
　　　　Table的定义很简单，它的主要特征是用"{"和"}"来括起一系列数据元素的。比如：

　　　　T1 = {} -- 定义一个空表
　　　　T1[1]=10 -- 然后我们就可以象C语言一样来使用它了。
　　　　T1["John"]={Age=27, Gender="Male"}
　　　　这一句相当于：
　　　　T1["John"]={} -- 必须先定义成一个表，还记得未定义的变量是nil类型吗
　　　　T1["John"]["Age"]=27
　　　　T1["John"]["Gender"]="Male"
　　　　当表的索引是字符串的时候，我们可以简写成：
　　　　T1.John={}
　　　　T1.John.Age=27
　　　　T1.John.Gender="Male"
　　　　或
　　　　T1.John{Age=27, Gender="Male"}
　　　　这是一个很强的特性。

　　　　在定义表的时候，我们可以把所有的数据内容一起写在"{"和"}"之间，这样子是非常方便，而且很好看。比如，前面的T1的定义，我们可以这么写：

　　　　T1=
　　　　{
　　　　　　10, -- 相当于 [1] = 10
　　　　　　[100] = 40,
　　　　　　John= -- 如果你原意，你还可以写成：["John"] =
　　　　　　{
　　　　　　　　Age=27, -- 如果你原意，你还可以写成：["Age"] =27
　　　　　　　　Gender=Male -- 如果你原意，你还可以写成：["Gender"] =Male
　　　　　　},
　　　　　　20 -- 相当于 [2] = 20
　　　　}

　　　　看起来很漂亮，不是吗？我们在写的时候，需要注意三点：
　　　　第一，所有元素之间，总是用逗号"，"隔开；
　　　　第二，所有索引值都需要用"["和"]"括起来；如果是字符串，还可以去掉引号和中括号；
　　　　第三，如果不写索引，则索引就会被认为是数字，并按顺序自动从1往后编；

　　　　表类型的构造是如此的方便，以致于常常被人用来代替配置文件。是的，不用怀疑，它比ini文件要漂亮，并且强大的多。

　　F. Function
　　　　函数，在Lua中，函数的定义也很简单。典型的定义如下：
　　　　function add(a,b) -- add 是函数名字，a和b是参数名字
　　　　 return a+b -- return 用来返回函数的运行结果
　　　　end

　　　　请注意，return语言一定要写在end之前。假如你非要在中间放上一句return，那么请写成：do return end。
　　　　还记得前面说过，函数也是变量类型吗？上面的函数定义，其实相当于：
　　　　add = function (a,b) return a+b end
　　　　当你重新给add赋值时，它就不再表示这个函数了。你甚至可以赋给add任意数据，包括nil （这样，你就清除了add变量）。Function是不是很象C语言的函数指针呢？

　　　　和C语言一样，Lua的函数可以接受可变参数个数，它同样是用"…"来定义的，比如：
　　　　function sum (a,b,…)
　　　　如果想取得…所代表的参数，可以在函数中访问arg局部变量（表类型）得到。
　　　　如 sum(1,2,3,4)
　　　　则，在函数中，a = 1, b = 2, arg = {3, 4}
　　　　更可贵的是，它可以同时返回多个结果，比如：
　　　　function s()
　　　　　　return 1,2,3,4
　　　　end
　　　　a,b,c,d = s() -- 此时，a = 1, b = 2, c = 3, d = 4
前面说过，表类型可以拥有任意类型的值，包括函数！因此，有一个很强大的特性是，拥有函数的表，哦，我想更恰当的应该说是对象吧。Lua可以使用面向对象编程了。不信？那我举例如下：

　　　　t =
　　　　{
　　　　 Age = 27
　　　　 add = function(self, n) self.Age = self.Age+n end
　　　　}
　　　　print(t.Age) -- 27
　　　　t.add(t, 10)
　　　　print(t.Age) -- 37

　　　　不过，t.add(t,10) 这一句实在是有点土对吧？没关系，在Lua中，你可以简写成：
　　　　t:add(10) -- 相当于 t.add(t,10)

　　G. Userdata 和 Thread
　　*
