主要来自http://www.cplusplus.com/reference/vector/vector/?kw=vector

vector是顺序存储的，如同数组，但是大小是可变的

就像数组一样，vector使用连续的存储空间存储元素，这意味着可以像数组那样使用下标/offset来访问任意元素，非常的快速高效。但是不同于数组的存储空间大小是固定的，vector的大小可以自动的变化。

从内部来看，vector使用动态分配的数组来实现。当新加入元素到尾部，而vector的空间（capacity）又不够用时，vector就要重新分配空间：新分配一个大一点的内存区，再把已有的数据复制过来，再继续操作。当新加入元素到中间部分，在空间够用的情况下，仍然需要把插入点以后的元素向后移动，以腾出一个位置。这都是开销非常大的操作。

为了减少分配空间和复制数据带来的开销，vectoe会请求一些附加的空间，方便往后添加数据时使用。但是额外的空间有可能导致浪费，如何权衡？不同的库可能使用不同的策略，但是无论如何（logarithmically growing intervals of size ），申请空间应该以实际使用空间（size）的指数形式增长，这样可以保证向vector的尾部添加数据（push_back）时，时间的开销近似是常数的。

也就是说，相比于数组,vector使用了更多的空间，来更有效的管理空间的增长。

相比于其他顺序存储容器，比如：双端队列，链表等，vector的访问（access）操作非常高效。在尾部添加或删除元素，相比较来说，也还是更为高效的，但是在其他地方的插入删除操作则是非常低效的。


容器的属性
元素以严格的线性顺序排列，单个元素可以通过他们在容器中的位置来访问。

支持直接访问序列中的元素，支持指针的运算，提供在尾部快速 添加/删除元素的接口函数

自动处理内存的使用


构造函数
default (1)	 explicit vector (const allocator_type& alloc = allocator_type());

fill (2)	 explicit vector (size_type n);
         	 vector (size_type n, const value_type& val, const allocator_type& alloc = allocator_type());

range (3)	 template <class InputIterator>
  		 vector (InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type());

copy (4) 	 vector (const vector& x);
		 vector (const vector& x, const allocator_type& alloc);

move (5)	
		 vector (vector&& x);
		 vector (vector&& x, const allocator_type& alloc);

initializer list (6)	
		 vector (initializer_list<value_type> il, const allocator_type& alloc = allocator_type());


vector的模板
template < class T, class Alloc = allocator<T> > class vector; 

T 数据类型，int float，以及自定义类型等


