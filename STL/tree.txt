1
红黑树
性质1. 节点是红色或黑色。
性质2. 根是黑色。
性质3. 所有叶子都是黑色（叶子是NIL节点）。
性质4. 每个红色节点必须有两个黑色的子节点。(从每个叶子到根的所有路径上不能有两个连续的红色节点。)
性质5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。



2
红黑树的删除

转换删除点
找到要删除的元素，通过普通的BST搜索，找到替代点，复制过去，问题就转化成删除只有一个儿子的节点了。删除点的另一个儿子为空，所以删除时grandparent以下的结构可以一一列举。把删除点的儿子称为N，删除点称为P'，删除点的parent称为P（N将会取代P'成为P的子节点），更上面为grand

a  删除点P'是红色的
那么P和N都是黑色的，删除了一个红节点，性质仍完整。下面讨论删除点是黑色

b  删除点是黑，N是红色
N即将替代之前的P',保持黑点数不变，需要把N变成黑色

c  删除点是黑，N也是黑色

以上的做法是比较朴素的。出事状态下的删除情况确实简单，可以列举。但是，有一种情况：删除点和父亲兄弟都是黑色节点，这个时候就不得不采取向上递归（减少黑点数），一旦递归，情况就不是之前的底层简单情况了，所以需要其他的，比较有普遍性的情况划分



3
红黑树的删除
，同样
	a  转化成单个子节点删除，然后以唯一的子节点N顶替
	b  删除点是红色的，简单...
        c  顶替点N是红色，简单...

讨论顶替点N是黑色（删除点是黑色，P点颜色不定）的情况，设N是P的左节点（是右点时，左右对换）：

	a  B红			-->对P左旋，P和B换色，N的新兄弟是黑色，按照bcd再处理
	b  B黑	Br黑	Bl黑	-->B变成红色，在P上递归*
	c  B黑	Br黑	Bl红	-->在B右旋，B和他的左儿子换色，变成d情况
	d  B黑	Br红		-->在P左旋，P和B换色，并将原B右儿子改黑色（完）



4