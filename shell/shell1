1
iconv 转换文件格式
iconv oldfile  -f gb2312 -c -o newfile

转换给定文件的编码。
 输入/输出格式规范：
  -f, --from-code=名称     原始文本编码
  -t, --to-code=名称       输出编码
  -l, --list                 列举所有已知的字符集
  -c                         从输出中忽略无效的字符
  -o, --output=FILE          输出文件
  -s, --silent               关闭警告
      --verbose              打印进度信息
  -?, --help                 给出该系统求助列表
      --usage                给出简要的用法信息
  -V, --version              打印程序版本号
  


4
第一次定义变量，赋值时等号左边不要加空格

命令行参数用$n表示,$0表示程序名称,$1表示第一个参数,$2为第二个参数，直到$9为第九个参数.参数多于9个后，必须在shell脚本内使用大括号将变量括起来，如${10} 

同时输入多个参数，必须使用空格分隔（要想在参数值中包含空格，就必须使用单引号或双引号）

测试是否传入了命令行参数： if [ –n “$1” ] then .. else .. fi

特殊变量$#测试执行脚本时包含的命令行参数个数，eg: if [ $# –ne 2 ] ${!#}返回最后一个命令行参数

$*将命令行中提供的所有参数作为一个单词处理，它将多个参数看成 一个参数

$@将命令行中提供的所有参数作为同一个字符串中的多个单词处理。 允许对其中的值进行迭代（一般使用for）

当需要在执行过程中获得执行脚本人员的输入，使用read命令.read命令接受标准输入或其他文件描述符输入。读入后将数据放入 一个标准变量中。-p 允许在read命令行中直接指定一个提示。使用-s使输入不显示在终端（例如输入密码）

最常用的方法是使用cat命令，并通过管道传给包含read的while语句。ex: cat test | while read line


5
[ -f "$file" ] 判断$file是否是一个文件
[ $a -lt 3 ] 判断$a的值是否小于3，同样-gt和-le分别表示大于或小于等于
[ -x "$file" ] 判断$file是否存在且有可执行权限，同样-r测试文件可读性
[ -n "$a" ] 判断变量$a是否有值，测试空串用-z
[ "$a" = "$b" ] 判断$a和$b的取值是否相等
[ cond1 -a cond2 ] 判断cond1和cond2是否同时成立，-o表示cond1和cond2有一成立

要注意条件测试部分中的空格。在方括号的两侧都有空格，在-f,-lt,=等符号两侧同样也有空格。如果没有这些空格，Shell解释脚本的时候就会出错。



6
bash -选择项Shell程序文件名几个常用的选择项是：
　　-e 如果一个命令失败就立即退出。
　　-n 读入命令但是不执行它们。
　　-u 置换时把未设置的变量看做出错。
　　-v 当读入Shell输入行时把它们显示出来。
　　-x 执行命令时把命令和它们的参数显示出来。

$$ 脚本运行的ID号
$! 后台运行的最后一个进程的ID号
$@ 与$*相同，但是使用时加引号，并在引号中返回每个参数。("$1""$2"...) 
$- 显示shell使用的当前选项。
$? 显示最后命令的退出状况。0表示没有错误。



7
shift会使参数向左移动：$1<--$2  $2<--$3

多个命令可以在一个命令行上运行，但此时要使用分号（；）分隔命令.



8
双括号 ((表达式1,表达式2…))
在双括号结构中，所有表达式可以像c语言一样，如：a++,b--等。
在双括号结构中，所有变量可以不加入：“$”符号前缀。
双括号可以进行逻辑运算，四则运算
双括号结构 扩展了for，while,if条件测试运算
支持多个表达式运算，各个表达式之间用“，”分开



9
du查看目录大小
-B  B后面紧跟K M G T等容量单位
-b  类似-B计量单位byte
-h  加上容量单位注释，提高可读性
-s  显示总容量

eg sudo du -sm /etc/* | sort -nr | less



10
df
a：显示全部的档案系统和各分割区的磁盘使用情形
i：显示i -nodes的使用量
k：大小用k来表示 (默认值)
t：显示某一个档案系统的所有分割区磁盘使用量
x：显示不是某一个档案系统的所有分割区磁盘使用量
T：显示每个分割区所属的档案系统名称 



11
内部变量     
$?:得到命令、函数或者脚本的退出状态。
$$:当前运行的脚本文件的PID号。
$BASH:Bash程序的位置。
$BASH_VERSINF[n]:Bash程序的版本信息，如n=0，得到主版本号，如n=5，得到Bash的架构信息。
$FUNCNAME:当前函数名。
$GLOBIGNORE:一个文件名的模式匹配列表，如果在file globbing中匹配到的文件包含这个列表中的某个文件，那么这个文件将从匹配到的文件中去掉。
$GROUPS:当前用户所属组，这是一个数组文件，包含了当前用户所属所有的组。可以用“echo ${GROUPS[1]}”来得到其值。
$HOME: 用户的主目录。
$EDITOR:脚本默认的编辑器。一般为vi或emacs。
$HOSTNAME:显示当前机器的名称。
$HOSTTYPE:显示当前计算机的架构类型。如i486
$MACHTYPE:显示系统的硬件相关信息，一个可能的结果是i486-pc-linux-gun
$IFS:指定shell解析字符串时分隔单词的分隔符，默认是空格、TAB、回车等，可以修改其值。如字符串各单词间是用逗号分隔的，就可以使用“IFS=‘，’”指定将逗号作为新的单词分隔符。
$LINENO:得到当前行的行号。
$OSTYPE:操作系统类型，一个可能的输出是linux-gun
$PATH:指定可执行程序的路径。在脚本中引用外部命令时，就在这些路径中寻找可执行程序。其内容可能是“/home/westnorth/bin:/usr/local/sbin : /usr/local/bin:/usr/bin:/sbin: /bin:/usr/game”.PATH中可能有多个目录，个目录间用“：”隔开



12
b=$(ls -l)  将ls -l的输出赋给b

fileinfo=$(du ./*)      输出作为一个串
fileinfo=($(du ./*))    输出被分割符号(空白，enter。。。)断开，形成数组形式

length=${#fileinfo[@]}  获取fileinfo数组的长度
${fileinfo[ $i ]        数组fileinfo中的下标为i的元素



13
查找文件 find / -name filename   在根目录下



14
case 表达式 in
值1|值2）
操作
值3|值4）
操作
值5|值6。。。）
。。。
esac



15
-eq 相等
-ge 大于等于
-le 小于等于
-ne 不等于
-gt 大于
-lt 小于



16
　-d 对象存在且为目录返回值为“是”
　-f 对象存在且为文件返回值为“是”
 -L 对象存在且为符号连接返回值为“是”
　-r 对象存在且可读则返回值为“是”
　-s 对象存在且长度非零则返回值为“是”
　-w 对象存在且且可写则返回值为“是”
　-x 对象存在且且可执行则返回值为“是”



17
/etc/passwd用来保存每个账户的信息。实际密码保存在 /etc/shadow中
/etc/passwd文件每行基本格式：
username:password:uid :gid    :gecos  :homedir    :shell
root    :x      :0    :0      :root   :/root      :/bin/bash
daemon  :x      :1    :1      :daemon :/usr/sbin  :/usr/sbin/nologin
bin     :x      :2    :2      :bin    :/bin       :/usr/sbin/nologin
qwe     :x      :1000 :1000   :qwe,,, :/home/qwe  :/bin/bash

useradd name     -p abc  -s /bin/bash    -u 507
        用户名       密码     指定shell       指定UID
        
        
        
18
使用printf代替echo和C风格相似

program < file 重定向输入为文件

tr -d '\r' < oldfile > newfile现以旧文件为输入，去除其中的'\r'，然后输出重定向到新文件

program >> file 追加模式的输出重定向

以管道形式连接重定向序列



19
/dev/null   bitbucket,传输到此处的文件都会被系统丢掉，读取这个文件会立即得到eof符号

/dev/tty    当程序打开此文件时，会重定向到一个终端，实体的console或者串口



20
(( )) ：一对圆括号有两个地方用到。
1，for循环，for (( expr1 ; expr2 ; expr3 )) 
2，数学表达 $(( ))就是把计算结果拿出来

[ ]：一个方括号跟test一样，用法如-b -c -gt -eq -a -o等
